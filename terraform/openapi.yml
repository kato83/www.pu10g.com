openapi: 3.0.0
info:
  title: Amazon API Gateway
  version: 1.0.0
servers:
  - url: "{protocol}://{hostname}/{stage}"
    variables:
      protocol:
        default: https
        enum:
          - http
          - https
      hostname:
        default: ""
      stage:
        default: api

tags:
  - name: default
  - name: options

paths:
  /v1/content:
    get:
      summary: SAMPLE
      responses:
        "200":
          description: 成功時
      security:
        - lambda-authorizer: []
        - basic-authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: "${www_pu10g_com_dynamo_crud_arn}"
        httpMethod: POST
        payloadFormatVersion: "2.0"
    post:
      summary: SAMPLE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              {
                "title": "コンテンツタイトル",
                "content": "コンテンツ本文\nコンテンツ本文",
                "isPublish": true,
              }
      responses:
        "200":
          description: 成功時
      security:
        - lambda-authorizer: []
        - basic-authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: "${www_pu10g_com_dynamo_crud_arn}"
        httpMethod: POST
        payloadFormatVersion: "2.0"
    options:
      tags:
        - options
      responses:
        "200":
          description: Preflightリクエスト
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{ "statusCode" : 200 }'
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,PATCH'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /v1/content/{ULID}:
    get:
      summary: SAMPLE
      responses:
        "200":
          description: 成功時
      security:
        - lambda-authorizer: []
        - basic-authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: "${www_pu10g_com_dynamo_crud_arn}"
        httpMethod: POST
        payloadFormatVersion: "2.0"
    patch:
      summary: SAMPLE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Revision:
                  type: string
            example:
              {
                "Revision": "2023-09-02T01:20:00Z"
              }
      responses:
        "200":
          description: 成功時
      security:
        - lambda-authorizer: []
        - basic-authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: "${www_pu10g_com_dynamo_crud_arn}"
        httpMethod: POST
        payloadFormatVersion: "2.0"
    delete:
      summary: SAMPLE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Revision:
                  type: string
            example:
              {
                "Revision": "2023-09-02T01:20:00Z"
              }
      responses:
        "200":
          description: 成功時
      security:
        - lambda-authorizer: []
        - basic-authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: "${www_pu10g_com_dynamo_crud_arn}"
        httpMethod: POST
        payloadFormatVersion: "2.0"
    options:
      tags:
        - options
      responses:
        "200":
          description: Preflightリクエスト
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{ "statusCode" : 200 }'
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,PATCH'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /v1/render-page/{ULID}:
    post:
      summary: SAMPLE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Revision:
                  type: string
            example:
              {
                "Revision": "2023-09-02T01:20:00Z"
              }
      responses:
        "200":
          description: 成功時
      security:
        - lambda-authorizer: []
        - basic-authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: "${www_pu10g_com_render_page_arn}"
        httpMethod: POST
        payloadFormatVersion: "2.0"
    options:
      tags:
        - options
      responses:
        "200":
          description: Preflightリクエスト
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{ "statusCode" : 200 }'
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,PATCH'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

# https://github.com/hashicorp/terraform-provider-aws/issues/26847
# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-authorizer.html
# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-authtype.html
# https://swagger.io/docs/specification/authentication/basic-authentication/
components:
  securitySchemes:
    lambda-authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authorizer:
        type: REQUEST
        identitySource: method.request.header.Authorization
        authorizerUri: ${www_pu10g_com_basic_auth_arn}
        authorizerPayloadFormatVersion: '2.0'
        authorizerResultTtlInSeconds: 0
      x-amazon-apigateway-authtype: Custom scheme with corporate claims
    basic-authorizer:
      type: http
      scheme: basic
